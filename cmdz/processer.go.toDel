package cmdz

import (
	"io"

	"mby.fr/utils/inout"
)

type IOProcesser = inout.IOProcesser
type IOProcesserCallback = inout.IOProcesserCallback
type StringIOProcesserCallback = inout.StringIOProcesserCallback

/*
	type basicOutWriter struct {
		stdout     io.Writer
		stderr     io.Writer
		processers []OutProcesser0
	}

	func (w basicOutWriter) OutWriter() io.Writer {
		return nil
	}

	func (w basicOutWriter) ErrWriter() io.Writer {
		return nil
	}

func (w basicOutWriter) Flush() error {

}
*/

type basicProcesser struct {
	Executer
	inProcesser  inout.IOProcesserReader
	outProcesser inout.IOProcesserWriter
	errProcesser inout.IOProcesserWriter
}

func (e *basicProcesser) init() {
	if e.inProcesser == nil {
		e.inProcesser = inout.NewProcessingStreamReader(e.Executer.Stdin())
	}
	if e.outProcesser == nil {
		e.outProcesser = inout.NewProcessingStreamWriter(e.Executer.Stdout())
	}
	if e.errProcesser == nil {
		e.errProcesser = inout.NewProcessingStreamWriter(e.Executer.Stderr())
	}
}

func (e *basicProcesser) Input(stdin io.Reader) Executer {
	e.init()
	// Read() => ProcessingReader => RecordingReader => stdin
	e.inProcesser.Nest(stdin)
	e.Executer.Input(e.inProcesser)
	return e
}

func (e *basicProcesser) Outputs(stdout, stderr io.Writer) Executer {
	e.init()
	// Write() => ProcessingWriter => RecordingWriter => stdout
	e.outProcesser.Nest(stdout)
	e.errProcesser.Nest(stderr)
	e.Executer.Outputs(e.outProcesser, e.errProcesser)
	return e
}

func (e *basicProcesser) ProcessIn(pcrs ...IOProcesser) *basicProcesser {
	e.init()
	e.inProcesser.Add(pcrs...)
	return e
}

func (e *basicProcesser) ProcessOut(pcrs ...IOProcesser) *basicProcesser {
	e.init()
	e.outProcesser.Add(pcrs...)
	return e
}

func (e *basicProcesser) ProcessErr(pcrs ...IOProcesser) *basicProcesser {
	e.init()
	e.errProcesser.Add(pcrs...)
	return e
}

func (e *basicProcesser) BlockRun() (int, error) {
	rc, err := e.Executer.BlockRun()
	return rc, err
}

func Proccessed(e Executer) *basicProcesser {
	return &basicProcesser{Executer: e}
}
